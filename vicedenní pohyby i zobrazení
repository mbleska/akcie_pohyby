import matplotlib.pyplot as plt
import pandas as pd
import yfinance as yf
import numpy as np  # Import numpy for log function

# Get the stock ticker from the user
ticker = input("Enter the stock ticker (e.g., 'GOOG'): ")

# Specify periods directly in the code (start, end, step)
periods = range(5, 31, 5)  # Modify this range as needed (nezapomenout k END přičíst jedničku)

# Download historical data for the given stock ticker
data = yf.download(ticker, start="2020-01-01", end="2024-11-30")

# Define the custom path for saving the raw data
custom_path = rf"C:\Users\m_ble\Desktop\programování\data k akciím\{ticker}.csv"
data.to_csv(custom_path)

# Load the CSV file
file_path = rf"C:\Users\m_ble\Desktop\programování\data k akciím\{ticker}.csv"

# Read the CSV, skipping the second and third rows
data = pd.read_csv(file_path, skiprows=[1, 2])

# Delete the columns I don't need (e.g., B, D, E, F, G)
columns_to_drop = [1, 3, 4, 5, 6]  # B, D, E, F, G in 0-based indexing
data = data.drop(data.columns[columns_to_drop], axis=1)

# Rename column A (which is the first column) to 'Date'
data.rename(columns={data.columns[0]: 'Date'}, inplace=True)

# Calculate logarithmic returns for specified periods
for p in periods:
    if p == 1:
        # Calculate the 1-day logarithmic return
        data[f"{p}D_Log_Return"] = np.log(data["Close"] / data["Close"].shift(1))
    else:
        # Calculate the p-day logarithmic return
        data[f"{p}D_Log_Return"] = np.log(data["Close"].shift(-(p - 1)) / data["Close"])
        # Ensure the first (p - 1) rows are NaN
        data[f"{p}D_Log_Return"] = data[f"{p}D_Log_Return"].shift(p - 1)

# Save the adjusted data to a new file
adjusted_path = rf"C:\Users\m_ble\Desktop\programování\data k akciím\{ticker}_adjusted.csv"
data.to_csv(adjusted_path, index=False)
print(f"Adjusted CSV file for {ticker} saved successfully!")


# Define the periods (these are already defined earlier in the code)
# You may need to loop through each period to plot the histograms
for p in periods:
    # Get the logarithmic returns for the current period
    log_returns = data[f"{p}D_Log_Return"].dropna()
    
    # Calculate mean and standard deviation for the current period
    mean = log_returns.mean()
    std_dev = log_returns.std()
    
    # Plot the histogram with small gaps between the bars
    plt.figure(figsize=(10, 6))
    ax = plt.gca()
    
    # Set the number of bins, and adjust the width of the bars
    n, bins, patches = ax.hist(log_returns, bins=50, color='blue', alpha=0.7, label=f"{p}D Log Return Histogram", rwidth=0.8)
    
    # Plot mean and std deviation lines
    ax.axvline(mean, color='red', linestyle='dashed', linewidth=2, label='Mean')
    ax.axvline(mean + std_dev, color='green', linestyle='dashed', linewidth=2, label='Mean + 1 SD')
    ax.axvline(mean - std_dev, color='green', linestyle='dashed', linewidth=2, label='Mean - 1 SD')
    ax.axvline(mean + 2 * std_dev, color='orange', linestyle='dashed', linewidth=2, label='Mean + 2 SD')
    ax.axvline(mean - 2 * std_dev, color='orange', linestyle='dashed', linewidth=2, label='Mean - 2 SD')
    
    # Set title and labels
    ax.set_title(f"Histogram of Logarithmic Returns for {p} Day Period")
    ax.set_xlabel('Log Return')
    ax.set_ylabel('Frequency')
    ax.legend()
    
    # Show the plot for each period
    plt.show()
