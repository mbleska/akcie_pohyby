import pandas as pd
import yfinance as yf
import numpy as np  # Import numpy for log function

# Get the stock ticker from the user
ticker = input("Enter the stock ticker (e.g., 'GOOG'): ")
n_days = 1

# Download historical data for the given stock ticker
data = yf.download(ticker, start="2020-01-01", end="2024-11-30")

# Define the custom path for saving the raw data
custom_path = rf"C:\Users\m_ble\Desktop\programování\data k akciím\{ticker}.csv"
data.to_csv(custom_path)

# Load the CSV file
file_path = rf"C:\Users\m_ble\Desktop\programování\data k akciím\{ticker}.csv"

# Read the CSV, skipping the second and third rows
data = pd.read_csv(file_path, skiprows=[1, 2])

# Delete the columns I don't need (e.g., B, D, E, F, G)
columns_to_drop = [1, 3, 4, 5, 6]  # B, D, E, F, G in 0-based indexing
data = data.drop(data.columns[columns_to_drop], axis=1)

# Rename column A (which is the first column) to 'Date'
data.rename(columns={data.columns[0]: 'Date'}, inplace=True)

if n_days == 1:
    # Calculate the logarithmic return for each day
    data[f"{n_days}D_Log_Return"] = np.log(data["Close"] / data["Close"].shift(1))
else:
    # Calculate the n-day logarithmic return
    data[f"{n_days}D_Log_Return"] = np.log(data["Close"].shift(-(n_days - 1)) / data["Close"])

    # Ensure the first (n_days - 1) rows are NaN, as they don't have enough data to calculate a valid n-day move
    data[f"{n_days}D_Log_Return"] = data[f"{n_days}D_Log_Return"].shift(n_days - 1)

# Save the adjusted data to a new file
adjusted_path = rf"C:\Users\m_ble\Desktop\programování\data k akciím\{ticker}_adjusted.csv"
data.to_csv(adjusted_path, index=False)
print(f"Adjusted CSV file for {ticker} saved successfully!")
